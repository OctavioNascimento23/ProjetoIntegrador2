BASH:
npm install mysql2 (precisa instalar o pacote para utilizar o mySQL)

JAVA BACKEND CODIGO:
import express from 'express';
import mysql from 'mysql2/promise';
import path from 'path';

const app = express();
app.use(express.urlencoded({ extended: true }));

// Configura a conexão com o banco de dados MySQL
const dbConfig = {
    host: "localhost",      // Altere para o seu host
    user: "seu_usuario",    // Altere para o seu usuário
    password: "sua_senha",  // Altere para a sua senha
    database: "sua_base_de_dados" // Altere para o nome da sua base de dados
};

// Função para conectar ao MySQL e executar uma query
async function queryMySQL(sql, params = []) {
    let con;
    try {
        con = await mysql.createConnection(dbConfig);
        const [result] = await con.execute(sql, params);
        return result;
    } catch (err) {
        console.error('Erro ao criar a conexão', err);
        throw err;
    } finally {
        if (con) {
            try {
                await con.end();
            } catch (err2) {
                console.error('Erro ao fechar a conexão', err2);
            }
        }
    }
}

// Rota para servir a página de registro
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'C:\\Users\\edusa\\OneDrive\\Documentos\\Sistemas de Informação\\x02 semestre\\Projeto Integrador 2\\ProjetoIntegrador2-main\\AreaAluno\\registro.html'));
});

// Rota para servir a página de login
app.get('/login', (req, res) => {
    res.sendFile(path.join(__dirname, 'C:\\Users\\edusa\\OneDrive\\Documentos\\Sistemas de Informação\\x02 semestre\\Projeto Integrador 2\\ProjetoIntegrador2-main\\AreaAluno\\entrar.html'));
});

// Rota para registrar um novo usuário
app.post('/submit', async (req, res) => {
    const { nome, cpf, email, endereco } = req.body;

    // Inserir dados do usuário no Banco
    const sql = `INSERT INTO users (nome, cpf, email, endereco) VALUES (?, ?, ?, ?)`;
    const params = [nome, cpf, email, endereco];

    try {
        await queryMySQL(sql, params);
        res.status(201).send("Usuário registrado com sucesso!");
    } catch (error) {
        res.status(500).json({ error: 'Erro ao salvar no banco de dados MySQL' });
    }
});

// Rota para fazer login
app.post('/login', async (req, res) => {
    const { cpf } = req.body;

    // Verifica se o CPF existe no banco de dados
    const sql = `SELECT * FROM users WHERE cpf = ?`;
    const params = [cpf];

    try {
        const result = await queryMySQL(sql, params);
        if (result.length > 0) {
            res.send("Login bem-sucedido!");
        } else {
            res.status(401).send("CPF não encontrado.");
        }
    } catch (error) {
        res.status(500).json({ error: 'Erro ao consultar o banco de dados MySQL' });
    }
});

app.listen(4000, () => {
    console.log('Servidor rodando na porta 4000');
});

BANCO DE DADOS(tabela que vms usar):
CREATE TABLE users (
    id INT AUTO_INCREMENT PRIMARY KEY, -- Identificador único para cada usuário
    nome VARCHAR(100) NOT NULL,        -- Nome do aluno
    cpf VARCHAR(11) NOT NULL UNIQUE,   -- CPF como identificador único (Primary Key alternativa)
    email VARCHAR(100) NOT NULL,       -- Email do aluno
    endereco VARCHAR(255)              -- Endereço do aluno
);


CREATE TABLE acessos (
    id INT AUTO_INCREMENT PRIMARY KEY,
    aluno_id INT NOT NULL,
    data_entrada DATETIME DEFAULT CURRENT_TIMESTAMP,
    data_saida DATETIME DEFAULT NULL,
    FOREIGN KEY (aluno_id) REFERENCES users(id)
);

SELECT TIMESTAMPDIFF(SECOND, data_entrada, data_saida) AS tempo_segundos
FROM acessos
WHERE aluno_id = ? AND data_saida IS NOT NULL;
